name: Compile Apache Ranger
on:
  workflow_dispatch:
    inputs:
      rangerTag:
        description: 'Ranger tag to build'
        type: string
        required: false
  schedule:
    - cron: '0 4 * * *'

defaults:
  run:
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:
  discover-new-releases:
    name: Discover releases
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.discover-releases.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: apache-ranger-compiled

      - name: Checkout Apache Ranger repository
        uses: actions/checkout@v2
        with:
          repository: apache/ranger
          fetch-depth: 0
          path: ranger

      - name: Discover Apache Ranger releases
        id: discover-releases
        env:
          RANGER_TAG: ${{ inputs.rangerTag }}
        run: |
          compiled=$(cat ./apache-ranger-compiled/compiled)
          if [[ "${RANGER_TAG}" == "" ]]; then
            versions=$((git --git-dir ./ranger/.git tag | grep release-ranger- | sed -e "s/release-ranger-//g" | grep -v "${compiled}") || echo "none")
          else
            versions=${RANGER_TAG}
          fi
          if [[ "${versions}" == "none" ]]; then
            matrix="none"
          else
            matrix=$(jq -cRn '[inputs as $version | {version: $version}] | { include: . }' <<<"$versions")
          fi
          echo "::set-output name=matrix::$matrix"
  
  build:
    name: Build Apache Ranger ${{ matrix.version }}
    if: ${{ needs.discover-new-releases.outputs.matrix != 'none' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover-new-releases.outputs.matrix) }}
    runs-on: ubuntu-latest
    needs: discover-new-releases
    outputs:
      matrix: ${{ steps.end-build.outputs.matrix }}
    steps:
      - name: Download Apache Ranger ${{ matrix.version }}
        id: download-ranger 
        run: |
          wget -nv "https://archive.apache.org/dist/ranger/${{ matrix.version }}/apache-ranger-${{ matrix.version }}.tar.gz" -O "apache-ranger.tar.gz"
          wget -nv "https://archive.apache.org/dist/ranger/${{ matrix.version }}/apache-ranger-${{ matrix.version }}.tar.gz.asc" -O "apache-ranger.tar.gz.asc"
          wget -nv "https://archive.apache.org/dist/ranger/KEYS" -O "ranger-KEYS"
          gpg --import ranger-KEYS
          gpg --verify apache-ranger.tar.gz.asc apache-ranger.tar.gz
          mkdir -p ./apache-ranger-${{ matrix.version }}
          tar zxf apache-ranger.tar.gz -C ./apache-ranger-${{ matrix.version }} --strip-components=1 
          cd apache-ranger-${{ matrix.version }}
          java_version=$(cat pom.xml | grep -Eo "<java.version.required>.*</java.version.required>" | sed "s/<java.version.required>//g" | sed "s </java.version.required>  g")
          echo "::set-output name=java-version::$java_version"

      - name: Set up JDK ${{ steps.download-ranger.outputs.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ steps.download-ranger.outputs.java-version }}
          java-package: jdk
          architecture: x64
      - name: Config local Maven
        uses: s4u/maven-settings-action@v2.6.0
        with:
          mirrors: '[{"id": "maven-default-http-blocker", "name": "Maven external http unblocker", "mirrorOf": "dummy", "url": "http://0.0.0.0"}]'
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Choose Python version
        id: choose-python-version
        run: |
          python_version='3.9'
          if dpkg --compare-versions "${{ matrix.version }}" "lt" "2.0.0"; then
            python_version='2.7'
          fi
          echo "::set-output name=python-version::${python_version}"
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.choose-python-version.outputs.python-version }}
      - name: Build Apache Ranger ${{ matrix.version }}
        run: |
          cd apache-ranger-${{ matrix.version }}
          if dpkg --compare-versions "${{ matrix.version }}" "lt" "2.1.0"; then
            mvn clean compile package assembly:assembly -DskipTests --no-transfer-progress -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
          else
            mvn clean compile package -DskipTests --no-transfer-progress -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
          fi
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d %H:%i:%s')"
      - name: Create release ${{ matrix.version }}
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          name: Apache Ranger ${{ matrix.version }}
          artifacts: "apache-ranger-${{ matrix.version }}/target/*.tar.gz,apache-ranger-${{ matrix.version }}/target/*.jar"
          replacesArtifacts: true
          body: "Apache Ranger compiled version ${{ matrix.version }} [Run timestamp ${{ steps.date.outputs.date }}]"
          allowUpdates: true
          tag: ${{ matrix.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout Apache Ranger compiled
        uses: actions/checkout@v2
        with:
          path: apache-ranger-compiled
      - name: Check Apache Ranger ${{ matrix.version }} as released
        run: |
          cd apache-ranger-compiled
          git config user.email "${{ secrets.ACTIONS_USER_EMAIL }}"
          git config user.name "${{ secrets.ACTIONS_USER_NAME }}"
          git pull --rebase origin master
          echo ${{ matrix.version }} >> ./compiled
          git add compiled
          git commit -m "Set Apache Ranger ${{ matrix.version }} as released"
          git push origin master
